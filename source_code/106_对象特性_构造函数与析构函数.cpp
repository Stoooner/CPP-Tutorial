#include <iostream>
using namespace std;
#include <unistd.h>
/*
    对象的初始化和清理是两个非常重要的安全问题：
        1. 一个对象或者变量没有初始状态，对其使用后果是未知的；
        2. 同样的使用完一个对象或变量，没有及时清理也会造成一定的安全问题；
    C++利用了构造函数和析构函数解决了上述的问题，这两个函数将会被编译器自动调用，完成对象初始化和清理工作。
    对象的初始化和清理工作是编译器强制我们做的事情，因此如果我们不提供构造函数和析构函数，编译器会提供，
    不过编译器提供的构造函数和析构函数是空实现。
        - 构造函数：主要作用在于创建对象时为对象的成员属性赋值，构造函数由编译器自动调用，无须手动调用；
        - 析构函数：主要作用在于对象销毁前系统自动调用，执行一些清理工作。
    
    ============================================================
    构造函数语法： 类名(){}
        1. 构造函数，没有返回值也不写void
        2. 构造函数与类名相同
        3. 构造函数可以有参数，因此可以发声重载
        4. 程序在调用对象时候会自动调用构造，无须手动调用，而且只会调用一次

    析构函数语法：~类名(){}
        1. 析构函数，没有返回值也不写void
        2. 函数名称与类名相同，在名称前加上符号~
        3. 析构函数不可以有参数，因此不可以发生重载
        4. 程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次
*/

// 对象的初始化和清理
class Person{
public:
    // 1. 构造函数进行初始化操作；
    // 程序在调用对象时候会自动调用构造，无须手动调用，而且只会调用一次
    Person(){
        cout << "Person的构造函数调用" << endl;
    }
    // 2. 析构函数进行清理的操作；
    // 程序在对象销毁前会自动调用析构，无须手动调用，而且只会调用一次
    ~Person(){
        cout << "Person的析构函数调用" << endl;
    }
};


void test01(){
    // 局部变量，被创建在了栈上，该函数执行完毕之后就会释放这个对象，
    // 系统在这个对象被释放前就会自动调用这个析构函数
    Person p; 
}

int main(){
    test01();
    // Person p;
    pause();
    return 0;
}